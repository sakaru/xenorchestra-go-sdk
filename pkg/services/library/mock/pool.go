// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatesfr/xenorchestra-go-sdk/pkg/services/library (interfaces: Pool,PoolAction)

// Package mock_library is a generated GoMock package.
package mock_library

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	payloads "github.com/vatesfr/xenorchestra-go-sdk/pkg/payloads"
)

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockPool) CreateNetwork(arg0 context.Context, arg1 uuid.UUID, arg2 payloads.CreateNetworkParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockPoolMockRecorder) CreateNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockPool)(nil).CreateNetwork), arg0, arg1, arg2)
}

// CreateVM mocks base method.
func (m *MockPool) CreateVM(arg0 context.Context, arg1 uuid.UUID, arg2 payloads.CreateVMParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockPoolMockRecorder) CreateVM(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockPool)(nil).CreateVM), arg0, arg1, arg2)
}

// EmergencyShutdown mocks base method.
func (m *MockPool) EmergencyShutdown(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmergencyShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmergencyShutdown indicates an expected call of EmergencyShutdown.
func (mr *MockPoolMockRecorder) EmergencyShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmergencyShutdown", reflect.TypeOf((*MockPool)(nil).EmergencyShutdown), arg0, arg1)
}

// Get mocks base method.
func (m *MockPool) Get(arg0 context.Context, arg1 uuid.UUID) (*payloads.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*payloads.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPool)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockPool) GetAll(arg0 context.Context, arg1 int, arg2 string) ([]*payloads.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*payloads.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPoolMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPool)(nil).GetAll), arg0, arg1, arg2)
}

// RollingReboot mocks base method.
func (m *MockPool) RollingReboot(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollingReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollingReboot indicates an expected call of RollingReboot.
func (mr *MockPoolMockRecorder) RollingReboot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingReboot", reflect.TypeOf((*MockPool)(nil).RollingReboot), arg0, arg1)
}

// RollingUpdate mocks base method.
func (m *MockPool) RollingUpdate(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollingUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollingUpdate indicates an expected call of RollingUpdate.
func (mr *MockPoolMockRecorder) RollingUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdate", reflect.TypeOf((*MockPool)(nil).RollingUpdate), arg0, arg1)
}

// MockPoolAction is a mock of PoolAction interface.
type MockPoolAction struct {
	ctrl     *gomock.Controller
	recorder *MockPoolActionMockRecorder
}

// MockPoolActionMockRecorder is the mock recorder for MockPoolAction.
type MockPoolActionMockRecorder struct {
	mock *MockPoolAction
}

// NewMockPoolAction creates a new mock instance.
func NewMockPoolAction(ctrl *gomock.Controller) *MockPoolAction {
	mock := &MockPoolAction{ctrl: ctrl}
	mock.recorder = &MockPoolActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolAction) EXPECT() *MockPoolActionMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockPoolAction) CreateNetwork(arg0 context.Context, arg1 uuid.UUID, arg2 payloads.CreateNetworkParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockPoolActionMockRecorder) CreateNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockPoolAction)(nil).CreateNetwork), arg0, arg1, arg2)
}

// CreateVM mocks base method.
func (m *MockPoolAction) CreateVM(arg0 context.Context, arg1 uuid.UUID, arg2 payloads.CreateVMParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockPoolActionMockRecorder) CreateVM(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockPoolAction)(nil).CreateVM), arg0, arg1, arg2)
}

// EmergencyShutdown mocks base method.
func (m *MockPoolAction) EmergencyShutdown(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmergencyShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmergencyShutdown indicates an expected call of EmergencyShutdown.
func (mr *MockPoolActionMockRecorder) EmergencyShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmergencyShutdown", reflect.TypeOf((*MockPoolAction)(nil).EmergencyShutdown), arg0, arg1)
}

// RollingReboot mocks base method.
func (m *MockPoolAction) RollingReboot(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollingReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollingReboot indicates an expected call of RollingReboot.
func (mr *MockPoolActionMockRecorder) RollingReboot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingReboot", reflect.TypeOf((*MockPoolAction)(nil).RollingReboot), arg0, arg1)
}

// RollingUpdate mocks base method.
func (m *MockPoolAction) RollingUpdate(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollingUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollingUpdate indicates an expected call of RollingUpdate.
func (mr *MockPoolActionMockRecorder) RollingUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdate", reflect.TypeOf((*MockPoolAction)(nil).RollingUpdate), arg0, arg1)
}
